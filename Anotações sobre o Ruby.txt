Ruby 27/03/2022

História e Características 
 - Criada na década de 90 pelo Japonês Yukihiro "Matz" Matsumoto
 - Lançamento ao público em 1995
 - Orientada a objetos
 - Tipagem dinâmica e forte
 - Interpretada
 - Expansão ligada a criação do Ruby on Rails

Porque aprender Ruby?
 - É uma linguagem Produtiva e Divertida
 - É Fácil aprender
 - Tem uma grande comunidade
 - É usada por grandes empresas
 - Está presente em várias áreas
 - Top 10 anos índices de popularidade 

Instalação
 - Rbenv
 - Codeanywhere 

Primeiro Hello Word

Missões especiais
 - Instale o Ruby na sua máquina ou prepare o codeanywhere
 - Exiba no console a seguinte mensagem: "Hello Word"
 - Leia o seguinte artigo: Ruby (Linguagem de programação) 

Tipos de dados
 => Existem para classificar dados, possibilitando a definição de regras para cada tipo. Com eles o ruby sabe como lidar com os dados de nossos progrmas.

Integer
 => Como na matemática, Inteiro é o tipo de dados que representa o conjunto de números positivos, negativos e 0.

Float
 => Tipo qeu representa os números reais inexatos. De forma abreviada, são números decimais, números que contêm ponto flutuante.

Boolean
 => Tipo de dados usado para informar a veracidade de algo. Possui apenas dois estados, sendo eles true que é uma instância da classe TrueClass e false que é uma instância da classe FalseClass.

String
 => Tipo que representa um texto. Um conjunto de letras, símbolso ou números. Pode ser definido de várias formas, porém, as mais comuns são dentro de aspas simples ou duplas.

Arry
 => Um tipo que nos permite armazenar uma lista ordenada de dados em um único objeto.
	Para definir um arry você deve utilizar colchetes.
Symbol
 => Símbolo é um tipo de dado semelhante a String, com a diferença de que ele é um obejto imutável. Duas strings idênticas podem ser objetos diferentes, mas um símbolo é apenas um objeto, ocupando sempre o mesmo espaço na memória. Um símbolo sempre é definido começando com dois pontos: seguido de seu nome.

Hash
 => Tipo que representa uma coleção de dados organizados por chaves únicas e seus repectivos valores. Enquanto arrys são definidos com colchetes, hashes são definidos com chaves '{}'

Tipagem dinâmica
 No ruby não é preciso definir o tipo de dado antes de atribuir um valor à uma variável. O tipo é dinâmico, ou seja, ele é definido de acordo com o dado atribuído.

Operadores Matemáticos
 Para resolver operações matemáticas no ruby contamos com a seguinte lista de operadores aritméticos:
 + Adição                    /  Divisão
 - Subtração                 %  Módulo
 * Multiplicação             ** Expoente  

Entrada/ Saída
 Essas duas operações manipulam dados, com a diferença que a entrada ocorre quando o programa lê dados que podem ter sido recebidos de um teclado, de um arquivo, ou então de outro programa e a saída é um dado produzido pelo programa que pode ser exibido em uma tela, enviado para um arquivo ou então para outro programa.


Missões Especiais
 - No IRB, Crie todos os principais tipos de dados mencionados na aula com valores diferentes dos exemplos.
 - Crie um programa que receba o nome e idade de uma pessoa e no final exiba estes dois dados em uma única frase.
 - Crie um programa que receba dois números inteiros e no final exiba a soma, a subtração, a adição e a divisão entre eles.

Estrutura de controle
 Tratam-se de código que escrevemos em nossos programas para analisar dados e decidir qual caminho seguir. Divide-se em dois tipos: Condicional e Iteração

Condicional
 Tipo de estrutura de controle que executa um trecho de código dependendo do resultado de uma condição.
 A seguir, veja as Instruções Condicionais: If, Else, Elsif, Unless e Case

IF
 Expressão que verifica se uma condição é verdadeira(true), e a partir deste resultado determina se as instruções dentro de seu corpo serão ou não executadas.

Else
 Informa o que fazer qando a verificação de uma condicão if for falsa.

ElsIf
 Utilizado quando há a necessidade de verificar mais de uma condição em um if.

Unless
 Enquanto o if é executado quando sua condição é verdadeira, o unless ocorre de forma contrária. É executado apenas quando a condição é falsa.

Case
 Instrução muito parecida com o if. Ele se enquadra muito bem a situações com diversas condições.

Iteração
 Tipo de estrutura de controle que gerencial quantas vezes um trecho de código será executado.
 A seguir, veja as instruções de iteração: For, While, Times, Do/While

FOR
 Usado para percorrer uma coleção de elementos.

While
 Instrução que repete um bloco de código enquanto sua condição é verdadeira.

Times
 Executa uma repetição por um determinado número de vezes.

DO/While - Loop
 Ele cria um laço de repetição que só é parado quando uma instrução break for verdadeira.


Missão especial
 Utilizando as estruturas de iteração e condição, crie uma calculadora que ofereça as usuário a opção de multiplicar, dividir, adicionar ou subtrair dois números.
Não esqueça de também permitir que o usuário feche o progrma.

Exercicios extras
https://ifrnead.github.io/rubynapratica/contents/programacao_estruturada/lista_exercicios_1.html

https://acervolima.com/ruby-modulo-matematico/



Método	                   Descrição	                                Exemplo
<valor>.to_i	Converte <valor> para um número inteiro (Integer)	"10".to_i
<valor>.to_f	Converte <valor> para um número real (Float)	        "3.14".to_f
<valor>.to_s	Converte <valor> para uma String	                 12.to_s


Mas qual é a diferença entre o puts e o print? A diferença é que o puts dá uma quebra de linha após exibir a String, enquanto o print não o faz. 


COLLECTIONS
 Na programação, collection representa um conjunto de dados semelhantes em uma única unidade.

Push coloca os elementos no final do array (adiciona)
Insert permite que add elementos em qualquer parte do array
Para pesquisar [posição do array]
Para editar estados[4] = "Atualização"
Estados[1..2]
Estados[-1]
Estados[-3..-4]
estados.first pega o primeiro elemento 
estados.last pega o ultimo elemento
estados.count pega a quantidade de elementos do array
estados.empty? pergunta para o array se ele está vazio
estados.include?('São Paulo') para procurar alguma coisa dentro do array
excluindo elementos de um array
estados.delete_at(2) 
estados.pop para deletar o ultimo valor
estados.shift deleta o primeiro elemento


Collections

 

Conteúdo

O conteúdo que será abordado na aula:

Collection
Manipulando Collections
Array
Hash
Iterações
 

Nesta aula você aprenderá o que são collections e como manipulá-las.

 

O que são Collections
 

Na programação, collection representa um conjunto de dados semelhantes em uma única unidade.

 

Ex: Um amigo tem uma grande quantidade de livros sobre programação e a fim de guardá-los de forma organizada os colocou dentro de uma caixa com o rótulo “Livros de Programação”.
Note que nossa caixa é uma representação dos livros com conteúdo de Programação. Uma collection é exatamente isso, um local onde concentramos uma quantidade de itens semelhantes.

Agora, sempre que meu amigo precisar rever um livro de programação, ele saberá onde encontrá-lo!

 

Dois tipos de collections bastante utilizados na linguagem Ruby são Array e Hash, os quais conhecemos na segunda aula deste curso.

 

Manipulando Collections

Array
Existem várias maneiras de manipular arrays. Abaixo encontram-se algumas muito úteis para todo programador.

 

Criando um Array

1- Crie um array vazio.

Default
irb
estados = []
1
2
irb
estados = []
Collections podem ter zero ou mais elementos.

 

 

Adicionando itens

1- Insira um novo item ao array estados.

Default
estados.push('Espírito Santo')
1
estados.push('Espírito Santo')
O push sempre irá adicionar itens de forma sequencial.

 

2- Também é possível inserir vários elementos de uma só vez.

Default
estados.push('Minas Gerais', 'Rio de Janeiro', 'São Paulo')
1
estados.push('Minas Gerais', 'Rio de Janeiro', 'São Paulo')
 

3- Veja o array estados com a instrução

Default
puts estados
1
puts estados
 

4- Para manter nossa coleção organizada em ordem alfabética ao inserir os itens ‘Acre’ e ‘Amapá’, devemos especificar que eles ocuparão as primeiras posições do array. Para isso contamos com o insert.

Default
estados.insert(0, 'Acre', 'Amapá')
1
estados.insert(0, 'Acre', 'Amapá')
Primeiro é passado o valor do índice onde a instrução será aplicada  acompanhado por um ou mais itens a serem adicionados.

 

5- Exiba o array estados

Default
puts estados
1
puts estados
Os elementos Acre e Amapá tornaram-se os primeiros do array.

 

 

Acessando elementos

Como já vimos na segunda aula, o item de um array pode ser acessado pelo valor de seu index.

1- Recupere o segundo elemento do array estados

Default
estados[1]
1
estados[1]
Saiba que o primeiro elemento não inicia no índice 1, mas sim no 0.

 

2- Você também pode acessar índices através de intervalos

Default
estados[2..5]
1
estados[2..5]
Retorna os itens dos índices 2, 3, 4 e 5

 

Utilizando números negativos conseguimos recuperar elementos a partir do ultimo item do array, de forma regressiva. O número -1 representa o ultimo elemento.

 

3- Adquira o penultimo elemento de estados

Default
estados[-2]
1
estados[-2]
 

4- Também funciona com intervalos

Default
estados[-3..-1]
1
estados[-3..-1]
 

5- Uma forma muito intuitiva e natural de recuperar o primeiro item é usar first

Default
estados.first
1
estados.first
 

6- Seguindo a mesma ideia, use last para o último

Default
estados.last
1
estados.last
 

 

Obtendo informações

1- Para saber a quantidade de itens em um Array você pode utilizar qualquer uma destas duas instruções

Default
estados.count
estados.length
1
2
estados.count
estados.length
 

2- Descubra se o array está vazio

Default
estados.empty?
1
estados.empty?
O resultado será verdadeiro ou falso

 

3- Verifique se um item específico está presente

Default
estados.include?('São Paulo')
1
estados.include?('São Paulo')
Igual ao empty, também resulta um valor verdadeiro ou falso

 

 

Excluindo elementos

1- Remova um item através de seu índice

Default
estados.delete_at(2)
1
estados.delete_at(2)
 

2- Exclua o ultimo item do array estados

Default
estados.pop
1
estados.pop
 

3- Para excluir o primeiro item faça

Default
estados.shift
1
estados.shift
 


Hash
A seguir veja exemplos importantíssimos sobre manipulação de Hashes

 

Novo Hash

1- Crie um hash vazio

Default
capitais = Hash.new
1
capitais = Hash.new
2- Um Hash também pode ser iniciado com vários pares de chave-valor

Default
capitais = { acre: 'Rio Branco', sao_paulo: 'São Paulo'}
1
capitais = { acre: 'Rio Branco', sao_paulo: 'São Paulo'}

3-  A chave de um Hash pode ser qualquer tipo de dado

Default
hash = {1 => 'Chave do tipo inteiro', true => 'Chave do tipo booleano, [1,2,3] => 'Chave do tipo array'}
1
hash = {1 => 'Chave do tipo inteiro', true => 'Chave do tipo booleano, [1,2,3] => 'Chave do tipo array'}
 

 

Adicionando itens

1- Adicione um novo item ao hash estados

Default
capitais[:minas_gerais] = "Belo Horizonte"
1
capitais[:minas_gerais] = "Belo Horizonte"
 

2- Acesse a capital que acabamos de inserir utilizando sua chave

Default
capitais[:minas_gerais]
1
capitais[:minas_gerais]
De forma sucinta, a chave é o index de nossos itens

 

3- Para retornar todas as chaves de um hash

Default
capitais.keys
1
capitais.keys
 

4- Agora, todos os valores de um hash  

Default
capitais.values
1
capitais.values
 

Exclusão

1- Remova um elemento chave-valor

Default
capitais.delete(:acre)
1
capitais.delete(:acre)
 

 

Obtendo informações

1- Descubra o tamanho do hash

Default
capitais.size
1
capitais.size
 

2- Verifique se o Hash está vazio

Default
capitais.empty?
1
capitais.empty?
 

Iterações
Agora, você será apresentado a três novas estruturas de repetição utilizadas para trabalhar com collections


Each
Percorre uma coleção de forma parecida ao for, porém, não sobrescrevendo o valor de variáveis fora da estrutura de repetição.


Array
1- Adicione o seguinte código a um programa chamado each_array.rb

Default
names = ['Joãozinho', 'Manoel', 'Juca']

name = 'Leonardo Scorza'

names.each do |name|
 puts name 
end

puts name
1
2
3
4
5
6
7
8
9
names = ['Joãozinho', 'Manoel', 'Juca']
 
name = 'Leonardo Scorza'
 
names.each do |name|
 puts name 
end
 
puts name
Ao executar o programa perceba que não foi alterado o valor da  variável name, definida antes da estrutura de repetição.

 

 

Hash
1- Crie um arquivo chamado  each_hash.rb com o seguinte código

Default
aulas = {'Aula 1 ' => 'liberada', 'Aula 2 ' => 'liberada', 'Aula 3 ' => 'liberada', 'Aula 4 ' => 'liberada', 'Aula 5 ' => 'em breve'}

aulas.each do |key, value|
 puts "#{key} #{value}"
end
1
2
3
4
5
aulas = {'Aula 1 ' => 'liberada', 'Aula 2 ' => 'liberada', 'Aula 3 ' => 'liberada', 'Aula 4 ' => 'liberada', 'Aula 5 ' => 'em breve'}
 
aulas.each do |key, value|
 puts "#{key} #{value}"
end
Em cada vez que a estrutura percorre o hash, o elemento atual é representado por key e value.

 

Map

Cria um array baseando-se em valores de outro array existente.

 

1- Crie um arquivo chamado map.rb

Default
array = [1, 2, 3, 4]

# \n é uma quebra de linha 
puts "\n Executando .map multiplicando cada item por 2"
# .map não altera o conteúdo do array original
new_array = array.map do |a| 
             a * 2
           end

puts "\n Array Original"
puts " #{array}"

puts "\n Novo Array"
puts " #{new_array}"

puts "\n Executando .map! multiplicando cada item por 2"
# .map! força que o conteúdo do array original seja alterado
array.map! do |a| 
 a * 2
end
puts "\n Array Original"
puts " #{array}"
puts ''
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
array = [1, 2, 3, 4]
 
# \n é uma quebra de linha 
puts "\n Executando .map multiplicando cada item por 2"
# .map não altera o conteúdo do array original
new_array = array.map do |a| 
             a * 2
           end
 
puts "\n Array Original"
puts " #{array}"
 
puts "\n Novo Array"
puts " #{new_array}"
 
puts "\n Executando .map! multiplicando cada item por 2"
# .map! força que o conteúdo do array original seja alterado
array.map! do |a| 
 a * 2
end
 
puts "\n Array Original"
puts " #{array}"
puts ''
Como vimos neste exemplo, podemos forçar que o array original seja alterado utilizando map!

 

Select

Realiza uma seleção de elementos presentes em uma collection através de uma condição pré definida. Traz como resultado somente os valores que passam nesta condição.


Array

1- Crie um arquivo chamado select_array.rb

Default
array = [1, 2, 3, 4, 5, 6]

selection = array.select do |a|
             a >= 4
           end

puts selection
1
2
3
4
5
6
7
array = [1, 2, 3, 4, 5, 6]
 
selection = array.select do |a|
             a >= 4
           end
 
puts selection
A condição para que um item do array seja selecionado é que seu valor seja maior ou igual a 4.

 

Hash

1- Crie um arquivo chamado select_hash.rb

Default
hash = {0 => 'zero', 1 => 'um', 2 => 'dois', 3 => 'tres'}

puts 'Selecionando keys com valor maior que 0'
selection_key = hash.select do |key, value|
                 key > 0
               end

puts selection_key
1
2
3
4
5
6
7
8
hash = {0 => 'zero', 1 => 'um', 2 => 'dois', 3 => 'tres'}
 
puts 'Selecionando keys com valor maior que 0'
selection_key = hash.select do |key, value|
                 key > 0
               end
 
puts selection_key
Veja que dentro de um Hash podemos fazer uma seleção por chave ou valor.


Iterações em Collections

Each
 Percorre uma coleção de forma parecida ao for, porém, não sobrescrevendo o valor de variáveis fora da estrutura de repetição.

Map
 Cria um array baseando-se em valores de ourtro array existente.

Select
 Realiza uma seleção de elementos presentes em uma collection através de uma condição pré definida. Traz como resultado somente os valores que passam nesta condição.


Missões especiais
Utilizando uma collection do tipo array, escreva um programa que receba 3 números e no final exiba o resultado de cada um deles elevado a segunda potência

Crie uma collection do tipo hash e permita que o usuário crie três elementos informando a chave e o valor. No final do programa para cada um desses elementos imprima a frase "uma das chaves é *** e o seu valor é ****"

Dado o seguinte hash:
Numbers = {A:10, B:30 2, C:20, D:25, E:15}
Crie uma instrução que seleciona o maior valor deste hash e no final imprima a chave e valor do elemento resultante 








